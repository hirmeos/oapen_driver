#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import sys
import json
import csv
from datetime import datetime
from optparse import OptionParser

ARGS = [
    {
        'val': '--measure',
        'dest': 'measure',
        'action': 'store',
        'default': None,
        'help': 'URI eg. https://metrics.operas-eu.org/oapen/downloads/v1'
    }, {
        'val': '--add-headers',
        'dest': 'add_headers',
        'action': 'store_true',
        'default': [],
        'help': 'Whether to print report headers'
    }
]
URI_SCHEME = "info:doi"
COUNTRY_URI_SCHEME = "urn:iso:std:3166:-2"
METRIC_TYPE = "Unique_Item_Requests"


def get_options(args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg['val'], dest=arg['dest'],
                          action=arg['action'], help=arg['help'])
    args, rest = parser.parse_args()

    allopts = args.measure
    if rest != [] or not allopts:
        raise ValueError('Invalid arguments provided')
    return args


def standarise_country(country_code):
    if not country_code:
        return ""
    return "{}:{}".format(COUNTRY_URI_SCHEME, country_code)


def resolve():
    r = json.load(sys.stdin)
    for record in r['Report_Items']:
        # ignore records that don't have a DOI
        if "DOI" not in record:
            continue
        uri = "{}:{}".format(URI_SCHEME, record["DOI"].lower())

        # iterate Perfomance_Instances
        for metric in record["Performance_Instances"]:
            datetime_obj = datetime.strptime(metric["Event_Month"], '%Y-%m')
            timestamp = datetime_obj.strftime('%Y-%m-%d 00:00:00')
            country = metric["Country"]["Country_Code"]
            country_code = standarise_country(country)
            value = metric["Metric_Type_Counts"][METRIC_TYPE]

            yield timestamp, uri, country_code, value


def run(measure, add_headers):
    hits = {}
    for timestamp, uri, country, value in resolve():
        key = (timestamp, uri, country)
        if key not in hits:
            hits[key] = 0
        hits[key] += int(value)

    w = csv.writer(sys.stdout)
    if add_headers:
        w.writerow(('measure_id', 'timestamp', 'work_uri',
                    'country_uri', 'event_uri', 'value'))
    for key, value in hits.items():
        row = tuple([measure] + list(key) + [''] + [value])
        w.writerow(row)


if __name__ == '__main__':
    options = get_options(ARGS)
    run(options.measure, options.add_headers)
