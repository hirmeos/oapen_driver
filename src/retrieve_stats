#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import json
import httplib2
from optparse import OptionParser


ARGS = [
    {
        'val': '--base-url',
        'dest': 'url',
        'action': 'store',
        'help': 'Base API endpoint URL'
    }, {
        'val': '--report',
        'dest': 'report',
        'action': 'store',
        'help': 'Type of report to query, e.g. BR1, BR1b'
    }, {
        'val': '--release',
        'dest': 'release',
        'action': 'store',
        'help': 'API release number, e.g. 4'
    }, {
        'val': '--requestor',
        'dest': 'requestor',
        'action': 'store',
        'help': 'Requestor ID'
    }, {
        'val': '--start-date',
        'dest': 'start_date',
        'action': 'store',
        'help': 'beginning of date range, as YYYY-mm'
    }, {
        'val': '--end-date',
        'dest': 'end_date',
        'action': 'store',
        'help': 'end of date range, as YYYY-mm'
    }, {
        'val': '--item',
        'dest': 'item',
        'action': 'store',
        'help': 'The publication id, URL encoded, e.g. oapen%3A12345'
    }, {
        'val': '--granularity',
        'dest': 'granularity',
        'action': 'store',
        'help': 'Monthly or Totals'
    }, {
        'val': '--breakdown',
        'dest': 'breakdown',
        'action': 'store',
        'help': 'Item_Country or Item_IP'
    }
]


def get_options(args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg['val'], dest=arg['dest'],
                          action=arg['action'], help=arg['help'])
    options, rest = parser.parse_args()

    allopts = options.url and options.report and options.release and \
        options.requestor and options.start_date and options.end_date \
        and options.item and options.granularity and options.breakdown
    if rest != [] or not allopts:
        raise ValueError('Invalid arguments provided')
    return options


def compile_url(base, report, release, requestor, start, end, item,
                granularity, breakdown):
    url_str = "%s?Report=%s&Release=%s&RequestorID=%s&BeginDate=%s&" \
              + "EndDate=%s&ItemIdentifier=%s&Granularity=%s&Breakdown=%s"
    return url_str % (base, report, release, requestor, start, end, item,
                      granularity, breakdown)


def print_report(api_url):
    h = httplib2.Http(disable_ssl_certificate_validation=True)
    res, content = h.request(api_url, 'GET')
    if res.status != 200:
        m = "Could not retrieve report (%d): %s" % (res.status, api_url)
        print(m, file=sys.stderr)
        sys.exit(1)
    report = json.loads(content.decode('utf-8'))
    if 'Exception' not in report['ReportResponse']:
        json.dump(report, sys.stdout)
    sys.exit(0)


def run():
    sys.stdin.close()
    options = get_options(ARGS)

    url = compile_url(options.url, options.report, options.release,
                      options.requestor, options.start_date, options.end_date,
                      options.item, options.granularity, options.breakdown)
    print_report(url)


if __name__ == '__main__':
    run()
